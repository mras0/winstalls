#!/usr/bin/perl
# create Amiga Installer script from template
# the prep file may contain:
#	to replace a variable: #name=value (without quotes around value!)
#		#multiple-versions=y
#		#version=3
#		#sub-dir=data
#		#highs-file=Zyconix.highs
#		#last-file=Disk.1
#	special variables to control selection for multiple versions:
#		#P_SelectVersion-Name-0=English (1.3)
#		#P_SelectVersion-Name-1=German (1.3D)
#	to replace a function: #function-name#switch-section
#		#P_MakeImages#3	(multiple times possible for any switch section)
#		#P_MakeImages#99 (execute always)
#		#P_MakeIcons#0 (switch-section must be 0)

use strict;
use warnings;

@ARGV != 3 and die "usage: mkinstall template prep destination";
my ($template,$prep,$dest) = @ARGV;

# read the template
my $script = do {
	local $/ = undef;
	open my $in, "<", $template or die "template file '$template' missing:$!";
	<$in>;
};

# parse the prep file
my (%vars, $func, %functxt);
open my $in, "<", $prep or die "prep file '$prep' missing:$!";
while (<$in>) {
	# variables
	if (/^#([\w\-]+)=(.+$)/) {
		my ($name,$val) = ($1,$2);
		# if there are non digits in $val surround it with "
		$vars{$name} = $val =~ /^\d$/ ? $val : "\"$val\"";
		$func = undef;
	# function head
	} elsif (/^#(P_\w+#\d+)$/) {
		$func = $1;
	# function text
	} elsif (/^[^#]/ and $func) {
		$functxt{$func} .= $_;
	} else {
		chomp;
		die "cannot parse prep data '$_'";
	}
}

# replace functions
my $P_SelectVersion = '(procedure P_SelectVersion
  (if (= #multiple-versions "")
    ("")
    (
      (set #version
        (askchoice
          (prompt ("Which version of %s would you like to install?" @app-name))
          (default 0)
	  (choices
		"P_SelectVersion-Name-0"
		"P_SelectVersion-Name-1"
		"P_SelectVersion-Name-2"
		"P_SelectVersion-Name-3"
		"P_SelectVersion-Name-4"
		"P_SelectVersion-Name-5"
	  )
          (help @askchoice-help)
        )
      )
      (select #version
        ("P_SelectVersion-Code 0")
        ("P_SelectVersion-Code 1")
        ("P_SelectVersion-Code 2")
        ("P_SelectVersion-Code 3")
        ("P_SelectVersion-Code 4")
        ("P_SelectVersion-Code 5")
      )
    )
  )
)';
$script =~ s/^\(procedure P_SelectVersion.*?^\)/$P_SelectVersion/ms or die 'could not replace P_SelectVersion';
my $P_MakeImages = '(procedure P_MakeImages
  (select #version
    ("P_MakeImages 0")
    ("P_MakeImages 1")
    ("P_MakeImages 2")
    ("P_MakeImages 3")
    ("P_MakeImages 4")
    ("P_MakeImages 5")
    ("P_MakeImages 6")
  )
  ("P_MakeImages 99")
)';
# if #last-file is set we don't replace P_MakeImages
if (! exists $vars{'last-file'}) {
	$script =~ s/^\(procedure P_MakeImages.*?^\)/$P_MakeImages/ms or die 'could not replace P_MakeImages';
}
my $P_MakeIcons = '(procedure P_MakeIcons
  ("P_MakeIcons 0")
)';
# we replace P_MakeIcons only if specified
if (exists $functxt{'P_MakeIcons#0'}) {
	$script =~ s/^\(procedure P_MakeIcons.*?^\)/$P_MakeIcons/ms or die 'could not replace P_MakeIcons';
}

# replace vars
foreach my $var (keys %vars) {
	$script =~ s/^(\s*)\(set #$var .*?\)/$1(set #$var $vars{$var})/m or
	$script =~ s/"$var"/$vars{$var}/m or
	die "could not replace '$var'";
}

# replace function code
foreach my $func (keys %functxt) {
	my ($name,$num) = split "#",$func;
	$script =~ s/^(\s+)\("$name $num"\)/$1(\n$functxt{$func}$1)/m or die "could not replace $name $num";
}
# clear unused P_SelectVersion names
$script =~ s/P_SelectVersion-Name-\d//gm;

# write result
open my $out, ">", $dest or die "cannot open '$dest':$!";
print $out $script or die "cannot write '$dest':$!";
close $out;

